#import <Cocoa/Cocoa.h>
#include "imcocoa.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAX_CONTROL_COUNT 2048

typedef enum ControlType
{
	PUSH_BUTTON,

} ControlType;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct ControlInfo
{
	void* parent;
	ControlType type;

	struct PushButtonData
	{
		bool state;
	};

	union
	{
		struct PushButtonData pushButton;
	} data;

} ControlInfo;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct Controls
{
	uint64_t ids[MAX_CONTROL_COUNT]; // unique ids generated by code
	void* nativeControls[MAX_CONTROL_COUNT]; // native control ptr
	ControlInfo info[MAX_CONTROL_COUNT]; // info for the control (state, etc)
	int count;
} Controls;

static Controls s_controls;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void Lookup_addEntry(uint64_t id, void* control, void* parent, ControlType type)
{
	if (s_controls.count >= MAX_CONTROL_COUNT)
	{
		printf("max number of controls reaached\n");
		return;
	}

	int offset = s_controls.count++;

	s_controls.ids[offset] = id;
	s_controls.nativeControls[offset] = control;
	s_controls.info[offset].parent = parent;
	s_controls.info[offset].type = type;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
static void Lookup_removeEntry(KeyValueLookup* lut, uint64_t key, uint64_t value)
{
	for (int i = 0, count = lut->count; i < count; ++i)
	{
		if (lut->key[i] == key)
		{
			lut->key[i] = lut->key[count - 1];
			lut->value[i] = lut->value[count - 1];
			lut->count--;
			return;
		}
	}
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool Lookup_findOffsetFromId(uint64_t id, int* offset)
{
	for (int i = 0, count = s_controls.count; i < count; ++i)
	{
		if (s_controls.ids[i] == id)
		{
			*offset = i;
			return true;
		}
	}

	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool Lookup_findOffsetFromControl(void* control, int* offset)
{
	for (int i = 0, count = s_controls.count; i < count; ++i)
	{
		if (s_controls.nativeControls[i] == control)
		{
			*offset = i;
			return true;
		}
	}

	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
static void Lookup_addNotExists(KeyValueLookup* lut, uint64_t key, uint64_t value)
{
	uint64_t outValue;

	if (!Lookup_findEntry(lut, key, &outValue))
		Lookup_addEntry(lut, key, value);
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@interface IMCocoaWindow : NSWindow
{
	NSView* childContentView;
@public
	void (*uiCallback)(void* userData);
	void* userData;
}
@end

@implementation IMCocoaWindow
@end

static IMCocoaWindow* s_currentWindow;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void updateUI()
{
	// TODO: Begin here, reset states of buttons etc
	s_currentWindow->uiCallback(s_currentWindow->userData);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@interface AppController : NSObject<NSApplicationDelegate>
{
}
@end

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@implementation AppController

- (IBAction)onButtonClick:(id)sender;
{
	int offset;

	if (!Lookup_findOffsetFromControl(sender, &offset))
	{
		printf("Unable to find %p\n", sender);
		return;
	}

	// clear the state for all push buttons

	for (int i = 0, count = s_controls.count; i < count; ++i)
	{
		if (s_controls.info[i].type == PUSH_BUTTON)
			s_controls.info[i].data.pushButton.state = false;
	}

	// set the state for this button
	
	s_controls.info[offset].data.pushButton.state = true;

	s_currentWindow = (IMCocoaWindow*)s_controls.info[offset].parent;
	updateUI();
}
@end

static AppController* s_controller = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// App

void IMCocoa_appCreate()
{
	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
	s_controller = [[AppController alloc] init];
	[[NSApplication sharedApplication] setDelegate:s_controller];
	[pool drain];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void IMCocoa_appDestroy()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void IMCocoa_appRun()
{
	[NSApp run];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void* IMCocoa_windowCreate(const char* name, void (*uiCallback)(void*), void* userData)
{
	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
	NSUInteger style = NSTitledWindowMask | NSClosableWindowMask | NSMiniaturizableWindowMask | NSResizableWindowMask;
	IMCocoaWindow* window = [[IMCocoaWindow alloc] initWithContentRect:NSMakeRect(0,0,400,400) styleMask:style backing:NSBackingStoreBuffered defer:NO];
	[window makeKeyAndOrderFront:nil];

	//IMCocoaFrameView* frameView = [window contentView];

	window->uiCallback = uiCallback;
	window->userData = userData;

	s_currentWindow = window; 
	updateUI();

	[pool drain];

	return window;	
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void IMCocoaWindow_destroy(void* handle)
{
	// TODO: Implement
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int IMCocoa_pushButtonCall(int id, const char* name, int x, int y, int w, int h)
{
	int offset;

	if (Lookup_findOffsetFromId(id, &offset))
	{
		return s_controls.info[offset].data.pushButton.state;
	}

	NSWindow* window = s_currentWindow;
	NSView* view = [window contentView]; 
	NSButton* button = [[NSButton alloc] initWithFrame:NSMakeRect(x, y, w, h)];
	[button setTitle: @"Test"];
	[button setBezelStyle:NSRoundedBezelStyle];
	[button setAction:@selector(onButtonClick:)];
	[button setTarget:s_controller];
	[view addSubview:button];  

	Lookup_addEntry((uint64_t)id, button, window, PUSH_BUTTON);

	return false;
}

